import java.util.Scanner;
import java.util.Stack;

public class StackCalculator {
    private Stack<Double> calculator;
    private String command;

    public StackCalculator() {
        calculator = new Stack<>();
        command = "";
    }

    public void displayWelcomeMessage() {
        System.out.println("Welcome to the Stack Calculator!");
        System.out.println("You can use commands to manipulate and view the stack.");
    }

    public void displayCommands() {
        System.out.println("\nAvailable Commands:");
        System.out.println("push <value> - Add a value to the stack.");
        System.out.println("pop - Remove the top value from the stack.");
        System.out.println("size - Display the number of elements in the stack.");
        System.out.println("listStack - Display all elements in the stack.");
        System.out.println("clear - Remove all elements from the stack.");
        System.out.println("mult - Multiply the top two values on the stack.");
        System.out.println("div - Divide the second-top value by the top value on the stack.");
        System.out.println("exit - Exit the application.");
    }

    public void push(double value) {
        calculator.push(value);
        command = "push";
        System.out.println(value + " pushed to the stack.");
    }

    public Double pop() {
        if (calculator.isEmpty()) {
            System.out.println("Stack is empty. Nothing to pop.");
            return null;
        }
        command = "sub";
        Double value = calculator.pop();
        System.out.println(value + " popped from the stack.");
        return value;
    }

    public int size() {
        return calculator.size();
    }

    public Object[] getValues() {
        return calculator.toArray();
    }

    public void listStack() {
        if (calculator.isEmpty()) {
            System.out.println("Stack is empty.");
        } else {
            System.out.println("Stack elements (top to bottom): " + calculator);
        }
    }

    public void clearStack() {
        calculator.clear();
        command = "clear";
        System.out.println("Stack cleared.");
    }

    public void multiply() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements on the stack to perform multiplication.");
            return;
        }
        double value1 = calculator.pop();
        double value2 = calculator.pop();
        double result = value1 * value2;
        calculator.push(result);
        command = "mult";
        System.out.println("Result of multiplication: " + result);
    }

    public void divide() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements on the stack to perform division.");
            return;
        }
        double divisor = calculator.pop();
        if (divisor == 0) {
            System.out.println("Cannot divide by zero. Operation aborted.");
            calculator.push(divisor);
            return;
        }
        double dividend = calculator.pop();
        double result = dividend / divisor;
        calculator.push(result);
        command = "div";
        System.out.println("Result of division: " + result);
    }

    public void run() {
        Scanner scanner = new Scanner(System.in);
        displayWelcomeMessage();
        displayCommands();

        while (true) {
            System.out.print("\nEnter command: ");
            String input = scanner.nextLine().trim();
            String[] parts = input.split("\\s+");
            String action = parts[0].toLowerCase();

            try {
                switch (action) {
                    case "push":
                        if (parts.length < 2) {
                            System.out.println("Usage: push <value>");
                        } else {
                            double value = Double.parseDouble(parts[1]);
                            push(value);
                        }
                        break;
                    case "pop":
                        pop();
                        break;
                    case "size":
                        System.out.println("Stack size: " + size());
                        break;
                    case "liststack":
                        listStack();
                        break;
                    case "clearstack":
                        clearStack();
                        break;
                    case "multiply":
                        multiply();
                        break;
                    case "divide":
                        divide();
                        break;
                    case "exit":
                        System.out.println("Exiting Stack Calculator. Goodbye!");
                        scanner.close();
                        return;
                    default:
                        System.out.println("Invalid command. Type 'exit' to quit or refer to the command list above.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid number format. Please enter a valid numeric value.");
            } catch (Exception e) {
                System.out.println("An error occurred: " + e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        StackCalculator stackCalculator = new StackCalculator();
        stackCalculator.run();
    }
}
